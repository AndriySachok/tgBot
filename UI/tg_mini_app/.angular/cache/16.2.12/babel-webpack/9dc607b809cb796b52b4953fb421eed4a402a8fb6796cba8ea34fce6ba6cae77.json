{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { timer, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConfigService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.configUrl = 'http://localhost:3000/api/page/123';\n  }\n  getConfig(intervalTime) {\n    const headers = new HttpHeaders({\n      'Content-Security-Policy': \"default-src 'self'; script-src 'self' http://localhost:3000; style-src 'self' http://localhost:3000; connect-src 'self' http://localhost:3000; img-src 'self' data: http://localhost:3000;\",\n      'Content-Type': 'text/html; charset=UTF-8'\n    });\n    return timer(0, intervalTime).pipe(switchMap(() => this.httpClient.get(this.configUrl, {\n      headers\n    })));\n  }\n  static #_ = this.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","timer","switchMap","ConfigService","constructor","httpClient","configUrl","getConfig","intervalTime","headers","pipe","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/andrij/Documents/angular/tgBot/UI/tg_mini_app/src/app/services/config.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable, interval, timer, filter,switchMap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n  constructor(private httpClient: HttpClient) {  }\n\n  private configUrl = 'http://localhost:3000/api/page/123';\n\n  getConfig(intervalTime: number): Observable<any[]> {\n   \n    const headers = new HttpHeaders({\n      'Content-Security-Policy': \"default-src 'self'; script-src 'self' http://localhost:3000; style-src 'self' http://localhost:3000; connect-src 'self' http://localhost:3000; img-src 'self' data: http://localhost:3000;\",\n      'Content-Type': 'text/html; charset=UTF-8'\n    })\n\n    return timer(0, intervalTime).pipe(\n        switchMap(() => this.httpClient.get<any[]>( this.configUrl, {headers})),\n    )\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAA+BC,KAAK,EAASC,SAAS,QAAQ,MAAM;;;AAKpE,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAEtB,KAAAC,SAAS,GAAG,oCAAoC;EAFT;EAI/CC,SAASA,CAACC,YAAoB;IAE5B,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,yBAAyB,EAAE,4LAA4L;MACvN,cAAc,EAAE;KACjB,CAAC;IAEF,OAAOC,KAAK,CAAC,CAAC,EAAEO,YAAY,CAAC,CAACE,IAAI,CAC9BR,SAAS,CAAC,MAAM,IAAI,CAACG,UAAU,CAACM,GAAG,CAAS,IAAI,CAACL,SAAS,EAAE;MAACG;IAAO,CAAC,CAAC,CAAC,CAC1E;EACH;EAAC,QAAAG,CAAA,G;qBAfUT,aAAa,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbd,aAAa;IAAAe,OAAA,EAAbf,aAAa,CAAAgB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}