{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class SafeHtmlPipe {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n  transform(html) {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n  static #_ = this.ɵfac = function SafeHtmlPipe_Factory(t) {\n    return new (t || SafeHtmlPipe)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"safeHtml\",\n    type: SafeHtmlPipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["SafeHtmlPipe","constructor","sanitizer","transform","html","bypassSecurityTrustHtml","_","i0","ɵɵdirectiveInject","i1","DomSanitizer","_2","pure"],"sources":["/Users/andrij/Documents/angular/tgBot/UI/tg_mini_app/src/app/random_stuff/safeHtml.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(html: string): SafeHtml {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n}"],"mappings":";;AAMA,OAAM,MAAOA,YAAY;EACvBC,YAAoBC,SAAuB;IAAvB,KAAAA,SAAS,GAATA,SAAS;EAAiB;EAE9CC,SAASA,CAACC,IAAY;IACpB,OAAO,IAAI,CAACF,SAAS,CAACG,uBAAuB,CAACD,IAAI,CAAC;EACrD;EAAC,QAAAE,CAAA,G;qBALUN,YAAY,EAAAO,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;;UAAZX,YAAY;IAAAY,IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}